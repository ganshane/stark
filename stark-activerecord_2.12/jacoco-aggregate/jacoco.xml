<?xml version="1.0" encoding="UTF-8" standalone="yes"?><!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd"><report name="Stark Activerecord"><sessioninfo id="fv-az99-653-75d40ad1" start="1639110922665" dump="1639110938716"/><group name="stark-activerecord-macro_2.12"><package name="stark/activerecord/macroinstruction"><class name="stark/activerecord/macroinstruction/ActiveRecordMacroDefinition$$typecreator1$1" sourcefilename="ActiveRecordMacroDefinition.scala"><method name="apply" desc="(Lscala/reflect/api/Mirror;)Lscala/reflect/api/Types$TypeApi;" line="41"><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="41"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="stark/activerecord/macroinstruction/ActiveRecordMacroDefinition$$typecreator2$2" sourcefilename="ActiveRecordMacroDefinition.scala"><method name="apply" desc="(Lscala/reflect/api/Mirror;)Lscala/reflect/api/Types$TypeApi;" line="101"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="101"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="stark/activerecord/macroinstruction/ActiveRecordMacroDefinition$$typecreator1$3" sourcefilename="ActiveRecordMacroDefinition.scala"><method name="apply" desc="(Lscala/reflect/api/Mirror;)Lscala/reflect/api/Types$TypeApi;" line="110"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="110"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="stark/activerecord/macroinstruction/ActiveRecordMacroDefinition$$typecreator2$1" sourcefilename="ActiveRecordMacroDefinition.scala"><method name="apply" desc="(Lscala/reflect/api/Mirror;)Lscala/reflect/api/Types$TypeApi;" line="49"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="49"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="stark/activerecord/macroinstruction/ActiveRecordMacroDefinition$$typecreator1$2" sourcefilename="ActiveRecordMacroDefinition.scala"><method name="apply" desc="(Lscala/reflect/api/Mirror;)Lscala/reflect/api/Types$TypeApi;" line="98"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="98"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="stark/activerecord/macroinstruction/ActiveRecordMacroDefinition$$typecreator2$4" sourcefilename="ActiveRecordMacroDefinition.scala"><method name="apply" desc="(Lscala/reflect/api/Mirror;)Lscala/reflect/api/Types$TypeApi;" line="194"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="194"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="stark/activerecord/macroinstruction/ActiveRecordMacroDefinition$" sourcefilename="ActiveRecordMacroDefinition.scala"><method name="&lt;clinit&gt;" desc="()V"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="find_by_pattern" desc="()Lscala/util/matching/Regex;" line="14"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="findByMethodImpl" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/Exprs$Expr;Lscala/collection/Seq;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;" line="19"><counter type="INSTRUCTION" missed="254" covered="0"/><counter type="BRANCH" missed="16" covered="0"/><counter type="LINE" missed="16" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="findMembers" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/collection/Seq;" line="53"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="findField" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/Exprs$Expr;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;" line="84"><counter type="INSTRUCTION" missed="281" covered="0"/><counter type="BRANCH" missed="14" covered="0"/><counter type="LINE" missed="12" covered="0"/><counter type="COMPLEXITY" missed="8" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="executeInternalWhere" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/collection/immutable/List;)Lscala/reflect/api/Exprs$Expr;" line="104"><counter type="INSTRUCTION" missed="129" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="updateMethodImpl" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/Exprs$Expr;Lscala/collection/Seq;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;" line="118"><counter type="INSTRUCTION" missed="202" covered="0"/><counter type="BRANCH" missed="16" covered="0"/><counter type="LINE" missed="12" covered="0"/><counter type="COMPLEXITY" missed="9" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="findByNamedParameterImpl" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/Exprs$Expr;Lscala/collection/Seq;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;" line="164"><counter type="INSTRUCTION" missed="165" covered="0"/><counter type="BRANCH" missed="12" covered="0"/><counter type="LINE" missed="12" covered="0"/><counter type="COMPLEXITY" missed="7" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findByMethodImpl$1" desc="(Lscala/reflect/api/Exprs$Expr;)Lscala/reflect/api/Trees$TreeApi;" line="24"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findByMethodImpl$2" desc="(Lscala/reflect/api/Symbols$TermSymbolApi;)Ljava/lang/String;" line="28"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findByMethodImpl$3" desc="(Lscala/collection/Seq;Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/TypeTags$WeakTypeTag;Lscala/Tuple2;)V" line="34"><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="BRANCH" missed="4" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="3" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findByMethodImpl$4" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/TypeTags$WeakTypeTag;Lscala/Tuple2;)Lscala/reflect/api/Trees$TreeApi;" line="39"><counter type="INSTRUCTION" missed="84" covered="0"/><counter type="BRANCH" missed="2" covered="0"/><counter type="LINE" missed="4" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findMembers$1" desc="(Lscala/reflect/api/Symbols$SymbolApi;)Z" line="60"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findMembers$2" desc="(Lscala/reflect/api/Symbols$SymbolApi;)Z" line="61"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findMembers$3" desc="(Lscala/reflect/api/Symbols$SymbolApi;)Lscala/reflect/api/Symbols$TermSymbolApi;" line="63"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findField$1" desc="(Ljava/lang/String;Lscala/reflect/api/Symbols$TermSymbolApi;)Z" line="94"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$updateMethodImpl$1" desc="(Lscala/reflect/api/Exprs$Expr;)Lscala/reflect/api/Trees$TreeApi;" line="126"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$updateMethodImpl$3" desc="(Ljava/lang/String;Lscala/reflect/api/Symbols$TermSymbolApi;)Z" line="131"><counter type="INSTRUCTION" missed="20" covered="0"/><counter type="BRANCH" missed="6" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$updateMethodImpl$2" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/collection/Seq;Lscala/reflect/api/TypeTags$WeakTypeTag;Lscala/reflect/api/Trees$TreeApi;)Ljava/lang/Object;" line="127"><counter type="INSTRUCTION" missed="264" covered="0"/><counter type="BRANCH" missed="24" covered="0"/><counter type="LINE" missed="14" covered="0"/><counter type="COMPLEXITY" missed="13" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findByNamedParameterImpl$1" desc="(Lscala/reflect/api/Symbols$TermSymbolApi;)Ljava/lang/String;" line="171"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findByNamedParameterImpl$2" desc="(Lscala/reflect/api/Exprs$Expr;)Lscala/reflect/api/Trees$TreeApi;" line="174"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findByNamedParameterImpl$3" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/collection/Seq;Lscala/reflect/api/TypeTags$WeakTypeTag;Lscala/reflect/api/Trees$TreeApi;)Ljava/lang/Object;" line="175"><counter type="INSTRUCTION" missed="250" covered="0"/><counter type="BRANCH" missed="24" covered="0"/><counter type="LINE" missed="9" covered="0"/><counter type="COMPLEXITY" missed="13" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="13"><counter type="INSTRUCTION" missed="14" covered="0"/><counter type="LINE" missed="3" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findByMethodImpl$3$adapted" desc="(Lscala/collection/Seq;Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/TypeTags$WeakTypeTag;Lscala/Tuple2;)Ljava/lang/Object;" line="34"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findMembers$1$adapted" desc="(Lscala/reflect/api/Symbols$SymbolApi;)Ljava/lang/Object;" line="60"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findMembers$2$adapted" desc="(Lscala/reflect/api/Symbols$SymbolApi;)Ljava/lang/Object;" line="61"><counter type="INSTRUCTION" missed="4" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$findField$1$adapted" desc="(Ljava/lang/String;Lscala/reflect/api/Symbols$TermSymbolApi;)Ljava/lang/Object;" line="94"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="$anonfun$updateMethodImpl$3$adapted" desc="(Ljava/lang/String;Lscala/reflect/api/Symbols$TermSymbolApi;)Ljava/lang/Object;" line="131"><counter type="INSTRUCTION" missed="5" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="1814" covered="0"/><counter type="BRANCH" missed="124" covered="0"/><counter type="LINE" missed="90" covered="0"/><counter type="COMPLEXITY" missed="90" covered="0"/><counter type="METHOD" missed="28" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="stark/activerecord/macroinstruction/ActiveRecordMacroDefinition$$typecreator1$5" sourcefilename="ActiveRecordMacroDefinition.scala"><method name="apply" desc="(Lscala/reflect/api/Mirror;)Lscala/reflect/api/Types$TypeApi;" line="182"><counter type="INSTRUCTION" missed="35" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="182"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="38" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="stark/activerecord/macroinstruction/ActiveRecordMacroDefinition$$typecreator1$4" sourcefilename="ActiveRecordMacroDefinition.scala"><method name="apply" desc="(Lscala/reflect/api/Mirror;)Lscala/reflect/api/Types$TypeApi;" line="154"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="154"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="stark/activerecord/macroinstruction/ActiveRecordMacroDefinition$$typecreator2$3" sourcefilename="ActiveRecordMacroDefinition.scala"><method name="apply" desc="(Lscala/reflect/api/Mirror;)Lscala/reflect/api/Types$TypeApi;" line="157"><counter type="INSTRUCTION" missed="48" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="&lt;init&gt;" desc="()V" line="157"><counter type="INSTRUCTION" missed="3" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="51" covered="0"/><counter type="LINE" missed="1" covered="0"/><counter type="COMPLEXITY" missed="2" covered="0"/><counter type="METHOD" missed="2" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><class name="stark/activerecord/macroinstruction/ActiveRecordMacroDefinition" sourcefilename="ActiveRecordMacroDefinition.scala"><method name="findByNamedParameterImpl" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/Exprs$Expr;Lscala/collection/Seq;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="updateMethodImpl" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/Exprs$Expr;Lscala/collection/Seq;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="findField" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/Exprs$Expr;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;"><counter type="INSTRUCTION" missed="6" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><method name="findByMethodImpl" desc="(Lscala/reflect/macros/whitebox/Context;Lscala/reflect/api/Exprs$Expr;Lscala/collection/Seq;Lscala/reflect/api/TypeTags$WeakTypeTag;)Lscala/reflect/api/Exprs$Expr;"><counter type="INSTRUCTION" missed="7" covered="0"/><counter type="COMPLEXITY" missed="1" covered="0"/><counter type="METHOD" missed="1" covered="0"/></method><counter type="INSTRUCTION" missed="27" covered="0"/><counter type="COMPLEXITY" missed="4" covered="0"/><counter type="METHOD" missed="4" covered="0"/><counter type="CLASS" missed="1" covered="0"/></class><sourcefile name="ActiveRecordMacroDefinition.scala"><line nr="13" mi="1" ci="0" mb="0" cb="0"/><line nr="14" mi="12" ci="0" mb="0" cb="0"/><line nr="19" mi="2" ci="0" mb="0" cb="0"/><line nr="20" mi="2" ci="0" mb="0" cb="0"/><line nr="21" mi="2" ci="0" mb="0" cb="0"/><line nr="23" mi="68" ci="0" mb="8" cb="0"/><line nr="24" mi="11" ci="0" mb="0" cb="0"/><line nr="25" mi="6" ci="0" mb="0" cb="0"/><line nr="26" mi="26" ci="0" mb="6" cb="0"/><line nr="28" mi="15" ci="0" mb="0" cb="0"/><line nr="29" mi="4" ci="0" mb="0" cb="0"/><line nr="30" mi="5" ci="0" mb="2" cb="0"/><line nr="31" mi="22" ci="0" mb="0" cb="0"/><line nr="34" mi="46" ci="0" mb="2" cb="0"/><line nr="35" mi="7" ci="0" mb="2" cb="0"/><line nr="36" mi="29" ci="0" mb="0" cb="0"/><line nr="39" mi="49" ci="0" mb="2" cb="0"/><line nr="40" mi="8" ci="0" mb="0" cb="0"/><line nr="41" mi="68" ci="0" mb="0" cb="0"/><line nr="42" mi="34" ci="0" mb="0" cb="0"/><line nr="46" mi="6" ci="0" mb="0" cb="0"/><line nr="48" mi="5" ci="0" mb="0" cb="0"/><line nr="49" mi="78" ci="0" mb="0" cb="0"/><line nr="53" mi="2" ci="0" mb="0" cb="0"/><line nr="60" mi="14" ci="0" mb="0" cb="0"/><line nr="61" mi="11" ci="0" mb="0" cb="0"/><line nr="62" mi="8" ci="0" mb="0" cb="0"/><line nr="63" mi="3" ci="0" mb="0" cb="0"/><line nr="84" mi="2" ci="0" mb="0" cb="0"/><line nr="85" mi="2" ci="0" mb="0" cb="0"/><line nr="87" mi="75" ci="0" mb="10" cb="0"/><line nr="90" mi="5" ci="0" mb="0" cb="0"/><line nr="94" mi="30" ci="0" mb="6" cb="0"/><line nr="95" mi="9" ci="0" mb="0" cb="0"/><line nr="96" mi="11" ci="0" mb="2" cb="0"/><line nr="97" mi="3" ci="0" mb="0" cb="0"/><line nr="98" mi="161" ci="0" mb="0" cb="0"/><line nr="99" mi="5" ci="0" mb="2" cb="0"/><line nr="100" mi="27" ci="0" mb="0" cb="0"/><line nr="101" mi="78" ci="0" mb="0" cb="0"/><line nr="104" mi="4" ci="0" mb="0" cb="0"/><line nr="107" mi="14" ci="0" mb="0" cb="0"/><line nr="108" mi="14" ci="0" mb="0" cb="0"/><line nr="110" mi="148" ci="0" mb="0" cb="0"/><line nr="118" mi="2" ci="0" mb="0" cb="0"/><line nr="119" mi="2" ci="0" mb="0" cb="0"/><line nr="120" mi="2" ci="0" mb="0" cb="0"/><line nr="122" mi="75" ci="0" mb="10" cb="0"/><line nr="124" mi="5" ci="0" mb="0" cb="0"/><line nr="126" mi="11" ci="0" mb="0" cb="0"/><line nr="127" mi="35" ci="0" mb="0" cb="0"/><line nr="128" mi="92" ci="0" mb="18" cb="0"/><line nr="129" mi="3" ci="0" mb="2" cb="0"/><line nr="130" mi="6" ci="0" mb="0" cb="0"/><line nr="131" mi="30" ci="0" mb="6" cb="0"/><line nr="132" mi="10" ci="0" mb="0" cb="0"/><line nr="133" mi="11" ci="0" mb="2" cb="0"/><line nr="134" mi="2" ci="0" mb="0" cb="0"/><line nr="135" mi="3" ci="0" mb="0" cb="0"/><line nr="136" mi="3" ci="0" mb="0" cb="0"/><line nr="143" mi="49" ci="0" mb="0" cb="0"/><line nr="144" mi="5" ci="0" mb="2" cb="0"/><line nr="145" mi="30" ci="0" mb="0" cb="0"/><line nr="148" mi="16" ci="0" mb="0" cb="0"/><line nr="152" mi="4" ci="0" mb="0" cb="0"/><line nr="153" mi="22" ci="0" mb="6" cb="0"/><line nr="154" mi="87" ci="0" mb="0" cb="0"/><line nr="156" mi="13" ci="0" mb="0" cb="0"/><line nr="157" mi="78" ci="0" mb="0" cb="0"/><line nr="164" mi="2" ci="0" mb="0" cb="0"/><line nr="165" mi="2" ci="0" mb="0" cb="0"/><line nr="166" mi="2" ci="0" mb="0" cb="0"/><line nr="169" mi="75" ci="0" mb="10" cb="0"/><line nr="171" mi="15" ci="0" mb="0" cb="0"/><line nr="174" mi="11" ci="0" mb="0" cb="0"/><line nr="175" mi="39" ci="0" mb="0" cb="0"/><line nr="176" mi="100" ci="0" mb="20" cb="0"/><line nr="177" mi="3" ci="0" mb="2" cb="0"/><line nr="178" mi="6" ci="0" mb="0" cb="0"/><line nr="179" mi="4" ci="0" mb="2" cb="0"/><line nr="180" mi="28" ci="0" mb="0" cb="0"/><line nr="182" mi="68" ci="0" mb="0" cb="0"/><line nr="183" mi="34" ci="0" mb="0" cb="0"/><line nr="185" mi="16" ci="0" mb="0" cb="0"/><line nr="189" mi="4" ci="0" mb="0" cb="0"/><line nr="190" mi="5" ci="0" mb="2" cb="0"/><line nr="191" mi="7" ci="0" mb="0" cb="0"/><line nr="193" mi="13" ci="0" mb="0" cb="0"/><line nr="194" mi="78" ci="0" mb="0" cb="0"/><line nr="197" mi="4" ci="0" mb="0" cb="0"/><counter type="INSTRUCTION" missed="2274" covered="0"/><counter type="BRANCH" missed="124" covered="0"/><counter type="LINE" missed="90" covered="0"/><counter type="COMPLEXITY" missed="112" covered="0"/><counter type="METHOD" missed="50" covered="0"/><counter type="CLASS" missed="11" covered="0"/></sourcefile><counter type="INSTRUCTION" missed="2274" covered="0"/><counter type="BRANCH" missed="124" covered="0"/><counter type="LINE" missed="90" covered="0"/><counter type="COMPLEXITY" missed="112" covered="0"/><counter type="METHOD" missed="50" covered="0"/><counter type="CLASS" missed="11" covered="0"/></package><counter type="INSTRUCTION" missed="2274" covered="0"/><counter type="BRANCH" missed="124" covered="0"/><counter type="LINE" missed="90" covered="0"/><counter type="COMPLEXITY" missed="112" covered="0"/><counter type="METHOD" missed="50" covered="0"/><counter type="CLASS" missed="11" covered="0"/></group><counter type="INSTRUCTION" missed="2274" covered="0"/><counter type="BRANCH" missed="124" covered="0"/><counter type="LINE" missed="90" covered="0"/><counter type="COMPLEXITY" missed="112" covered="0"/><counter type="METHOD" missed="50" covered="0"/><counter type="CLASS" missed="11" covered="0"/></report>